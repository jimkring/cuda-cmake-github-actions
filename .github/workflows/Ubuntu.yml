# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"
  # pull_request:
  #   paths:
  #     - "**"
  #     - "!.github"
  #     - ".github/workflows/Ubuntu.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.4"
            gcc: 9
          # - os: ubuntu-20.04
          #   cuda: "11.2"
          #   gcc: 10
          # 18.04 supports CUDA 10.1+ (gxx <= 8)
          # - os: ubuntu-18.04
          #   cuda: "11.0"
          #   gcc: 8
          # - os: ubuntu-18.04
          #   cuda: "10.2"
          #   gcc: 8
          - os: ubuntu-18.04
            cuda: "10.1"
            gcc: 8

          # 16.04 supports CUDA 8+
          # - os: ubuntu-16.04
          #   cuda: "11.0"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "10.2"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "10.1"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "10.0"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "9.2"
          #   gcc: 7
          # - os: ubuntu-16.04
          #   cuda: "9.1"
          #   gcc: 6
          - os: ubuntu-16.04
            cuda: "9.0"
            gcc: 6

          # Libraries-dev subpackage does not exist for CUDA 8. Should make a better way of providing version specific subpackages.
          # - os: ubuntu-16.04
          #   cuda: "8.0"
          #   gcc: 6
    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: ./scripts/actions/install_cuda_ubuntu.sh
      shell: bash

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      working-directory: ${{ env.build_dir }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi



    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

