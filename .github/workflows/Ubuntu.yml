# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.2"
            compiler: gcc-10

          - os: ubuntu-20.04
            cuda: "11.2"
            compiler: clang-9

          - os: ubuntu-18.04
            cuda: "10.1"
            compiler: gcc-8

    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: ./scripts/actions/install_cuda_ubuntu.sh
      shell: bash

    # Specify the correct host compilers
    - name: Install/Select GCC
      if: ${{ startsWith(matrix.compiler, 'gcc')}}
      run: |
        compiler=${{ matrix.compiler }}
        gcc_version=${compiler/gcc-/}
        sudo apt-get install -y gcc-${gcc_version} g++-${gcc_version}
        echo "CC=/usr/bin/gcc-${gcc_version}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${gcc_version}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${gcc_version}" >> $GITHUB_ENV

    - name: Install/Select Clang
      if: ${{ startsWith(matrix.compiler, 'clang')}}
      run: |
        compiler=${{ matrix.compiler }}
        clang_version=${compiler/clang-/}
        sudo apt-get install -y clang-${clang_version} clang-tools-${clang_version}
        echo "CC=/usr/bin/clang-${clang_version}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/clang++-${clang_version}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/clang++-${clang_version}" >> $GITHUB_ENV

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      working-directory: ${{ env.build_dir }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

